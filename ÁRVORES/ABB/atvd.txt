3째 quest찾o:

3.a:
    public searchSmall(){
        if(this.isEmpty==true){
            return null;
        }else{
            return lowestValue(this.root);
        }
    }
    private T lowestValue(ABBNode <T> r){
        if(r.getLeft != null){
            lowestValue(r.getLeft);
        }else{
            return r.getInfo();
        }
    }

3.b:
    public searchBig(){
        if(this.isEmpty==true){
            return null;
        }else{
            return highestValue(this.root);
        }
    }
    private T highestValue(ABBNode <T> r){
        if(r.getRight != null){
            highestValue(r.getRight);
        }else{
            return r.getInfo();
        }
    }

3.c:
    public searchSmall(){
        if(this.isEmpty==true){
            return null;
        }else{
            return lowestValue(this.root);
        }
    }

3.d:
    public searchBig(){
        if(this.isEmpty==true){
            return null;
        }else{
            return highestValue(this.root);
        }
    }

4째 quest찾o

Classe da Queue:

package queue;

public class Queue<T> {
    
    QueueNode<T> beggin;
    QueueNode<T> end;

    public boolean isEmpty() {
        return beggin == null;
    }

    public void enQueue(T data) {
        if (isEmpty()) {
            QueueNode<T> newNode = new QueueNode<>(data);
            beggin = newNode;
            end = newNode;
        }else{
            QueueNode<T> newNode = new QueueNode<>(data);
            end.setNext(newNode);
            end = newNode;
        }
    }
    public T deQueue() {
        QueueNode<T> aux = beggin;
        if (isEmpty()) {
            return null;
        }else if(beggin != end){

            beggin = beggin.getNext();
            return aux.getInfo();
        }else{
            beggin = null;
            end = null;
            return aux.getInfo();
        }
    }
}


Classe do QueueNode:

package queue;
public class QueueNode<T> {
    private T info;
    private QueueNode<T> next;

    QueueNode(T info) {
        this.info = info;
    }
    QueueNode(QueueNode<T> next) {
        this.next = next;
    }

    public T getInfo() {
        return info;
    }

    public void setInfo(T info) {
        this.info = info;
    }

    public QueueNode<T> getNext() {
        return next;
    }

    public void setNext(QueueNode<T> next) {
        this.next = next;
    }
}
